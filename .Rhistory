}
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
abline(v=var(y),col=4)
var(y)
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,1),col=2,lwd=2,add=TRUE)
abline(v=var(y),col=4)
var(y)
abline(v=quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["QB"]]-df[["WR"]]
y=differences
mu.0=0
s2.0=100
source("norm.invchisq.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,1,mean(y),n.mcmc)
warnings()
layout(matrix(1:2,2,1))
plot(out$mu.save,type="l",main="",ylab=bquote(mu),xlab="MCMC Iteration")
abline(h=mu.true,lwd=2,col=rgb(0,1,0,.5))
plot(out$s2.save,type="l",main="",ylab=bquote(sigma^2),xlab="MCMC Iteration")
abline(h=s2.true,lwd=2,col=rgb(0,1,0,.5))
mean(out$mu.save[-(1:n.burn)])
quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975))
mean(out$s2.save[-(1:n.burn)])
quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975))
dinvchisq <- function(x,nu){
(2^(-nu/2) / gamma(nu/2)) * x^(-nu/2-1) * exp(-1/(2*x))
}
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
abline(v=var(y),col=4)
var(y)
abline(v=quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
abline(v=var(y),col=4)
var(y)
abline(v=quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
integrate(density(out$mu.save[n.burn:n.mcmc]),lower=0,upper=Inf)
density(out$mu.save[n.burn:n.mcmc])
integrate( approxfun(density(out$mu.save[n.burn:n.mcmc])),lower=0,upper=Inf)
approxfun(density(out$mu.save[n.burn:n.mcmc]))
func = pproxfun(density(out$mu.save[n.burn:n.mcmc]))
d = density(out$mu.save[n.burn:n.mcmc])
xx <- d$x  ## 512 evenly spaced points on [min(x) - 3 * d$bw, max(x) + 3 * d$bw]
dx <- xx[2L] - xx[1L]  ## spacing / bin size
yy <- d$y  ## 512 density values for `xx`
p.unscaled <- sum(yy[xx >= 1]) * dx
p.unscaled
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
d = density(out$mu.save[n.burn:n.mcmc])
d = density(out$mu.save[n.burn:n.mcmc])
xx <- d$x  ## 512 evenly spaced points on [min(x) - 3 * d$bw, max(x) + 3 * d$bw]
dx <- xx[2L] - xx[1L]  ## spacing / bin size
yy <- d$y  ## 512 density values for `xx`
p.unscaled <- sum(yy[xx >= 0]) * dx
p.unscaled
d = density(out$mu.save[n.burn:n.mcmc])
xx <- d$x  ## 512 evenly spaced points on [min(x) - 3 * d$bw, max(x) + 3 * d$bw]
dx <- xx[2L] - xx[1L]  ## spacing / bin size
yy <- d$y  ## 512 density values for `xx`
p.unscaled <- sum(yy[xx >= 2.3]) * dx
p.unscaled
d = density(out$mu.save[n.burn:n.mcmc])
xx <- d$x  ## 512 evenly spaced points on [min(x) - 3 * d$bw, max(x) + 3 * d$bw]
dx <- xx[2L] - xx[1L]  ## spacing / bin size
yy <- d$y  ## 512 density values for `xx`
p.unscaled <- sum(yy[xx >= 2.25]) * dx
p.unscaled
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x  ## 512 evenly spaced points on [min(x) - 3 * d$bw, max(x) + 3 * d$bw]
dx = xx[2L] - xx[1L]  ## spacing / bin size
yy = d$y  ## 512 density values for `xx`
result = sum(yy[xx >= 2.25]) * dx
result
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x  ## 512 evenly spaced points on [min(x) - 3 * d$bw, max(x) + 3 * d$bw]
dx = xx[2L] - xx[1L]  ## spacing / bin size
yy = d$y  ## 512 density values for `xx`
result = sum(yy[xx >= 0]) * dx
result
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x  ## 512 evenly spaced points on [min(x) - 3 * d$bw, max(x) + 3 * d$bw]
dx = xx[2L] - xx[1L]  ## spacing / bin size
yy = d$y  ## 512 density values for `xx`
result = sum(yy[xx >= 2.2]) * dx
result
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x  ## 512 evenly spaced points on [min(x) - 3 * d$bw, max(x) + 3 * d$bw]
dx = xx[2L] - xx[1L]  ## spacing / bin size
yy = d$y  ## 512 density values for `xx`
result = sum(yy[xx >= 0]) * dx
result
sum(yy) * dx
result = sum(yy[xx >= 0]) * dx
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x  ## 512 evenly spaced points on [min(x) - 3 * d$bw, max(x) + 3 * d$bw]
dx = xx[2L] - xx[1L]  ## spacing / bin size
yy = d$y  ## 512 density values for `xx`
result = sum(yy[xx >= 0]) * dx
result
sum(yy) * dx
layout(matrix(1:2,2,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
layout(matrix(1:2,3,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
layout(matrix(1:2,2,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
layout(matrix(1:2,2,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
abline(v=var(y),col=4)
var(y)
abline(v=quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
layout(matrix(1:2,2,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("right",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
abline(v=var(y),col=4)
var(y)
legend("right",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
abline(v=var(y),col=4)
var(y)
abline(v=quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x
dx = xx[2L] - xx[1L]
yy = d$y
result = sum(yy[xx >= 0]) * dx
result
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["QB"]]
y=differences
mu.0=0
s2.0=100
source("norm.invchisq.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,1,mean(y),n.mcmc)
layout(matrix(1:2,2,1))
plot(out$mu.save,type="l",main="",ylab=bquote(mu),xlab="MCMC Iteration")
abline(h=mu.true,lwd=2,col=rgb(0,1,0,.5))
plot(out$s2.save,type="l",main="",ylab=bquote(sigma^2),xlab="MCMC Iteration")
abline(h=s2.true,lwd=2,col=rgb(0,1,0,.5))
mean(out$mu.save[-(1:n.burn)])
quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975))
mean(out$s2.save[-(1:n.burn)])
quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975))
dinvchisq <- function(x,nu){
(2^(-nu/2) / gamma(nu/2)) * x^(-nu/2-1) * exp(-1/(2*x))
}
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x
dx = xx[2L] - xx[1L]
yy = d$y
result = sum(yy[xx >= 0]) * dx
result
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["WR"]]
y=differences
mu.0=0
s2.0=100
source("norm.invchisq.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,1,mean(y),n.mcmc)
warnings()
layout(matrix(1:2,2,1))
plot(out$mu.save,type="l",main="",ylab=bquote(mu),xlab="MCMC Iteration")
abline(h=mu.true,lwd=2,col=rgb(0,1,0,.5))
plot(out$s2.save,type="l",main="",ylab=bquote(sigma^2),xlab="MCMC Iteration")
abline(h=s2.true,lwd=2,col=rgb(0,1,0,.5))
mean(out$mu.save[-(1:n.burn)])
quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975))
mean(out$s2.save[-(1:n.burn)])
quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975))
dinvchisq <- function(x,nu){
(2^(-nu/2) / gamma(nu/2)) * x^(-nu/2-1) * exp(-1/(2*x))
}
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x
dx = xx[2L] - xx[1L]
yy = d$y
result = sum(yy[xx >= 0]) * dx
result
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["WR"]]
y=differences
mu.0=0
s2.0=100
source("norm.invchisq.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,1,mean(y),n.mcmc)
layout(matrix(1:2,2,1))
plot(out$mu.save,type="l",main="",ylab=bquote(mu),xlab="MCMC Iteration")
abline(h=mu.true,lwd=2,col=rgb(0,1,0,.5))
plot(out$s2.save,type="l",main="",ylab=bquote(sigma^2),xlab="MCMC Iteration")
abline(h=s2.true,lwd=2,col=rgb(0,1,0,.5))
mean(out$mu.save[-(1:n.burn)])
quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975))
mean(out$s2.save[-(1:n.burn)])
quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975))
dinvchisq <- function(x,nu){
(2^(-nu/2) / gamma(nu/2)) * x^(-nu/2-1) * exp(-1/(2*x))
}
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x
dx = xx[2L] - xx[1L]
yy = d$y
result = sum(yy[xx >= 0]) * dx
result
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
abline(v=var(y),col=4)
var(y)
abline(v=quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
df
differences = df[["QB"]]-df[["WR"]]
qb = df[["QB"]]
wr = df[["WR"]]
cov(qb,wr)
cov(wr,qb)
plot(qb,wr)
QB = df[["QB"]]
WR = df[["WR"]]
cov(wr,qb)
plot(QR,WR)
plot(QR,WR)
QB = df[["QB"]]
WR = df[["WR"]]
cov(WR,QB)
plot(QR,WR)
y=differences
plot(QB,WR)
plot (y)
mu.0=0
s2.0=100
source("norm.Invchi2.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.IG.mcmc(y,mu.0,s2.0,mean(y),n.mcmc)
layout(matrix(1:2,2,1))
plot(out$mu.save,type="l",main="",ylab=bquote(mu),xlab="MCMC Iteration")
abline(h=mu.true,lwd=2,col=rgb(0,1,0,.5))
plot(out$s2.save,type="l",main="",ylab=bquote(sigma^2),xlab="MCMC Iteration")
abline(h=s2.true,lwd=2,col=rgb(0,1,0,.5))
mean(out$mu.save[-(1:n.burn)])
quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975))
mean(out$s2.save[-(1:n.burn)])
quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975))
dinvgamma <- function(x,q,r){
x^(-q-1) * exp(-1/r/x) / (r^q) / gamma(q)
}
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
set.seed(2021)
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["WR"]]
y=differences
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["WR"]]-df[["QB"]]
y=differences
mu.0=0
s2.0=100
source("norm.invchisq.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,1,mean(y),n.mcmc)
layout(matrix(1:2,2,1))
plot(out$mu.save,type="l",main="",ylab=bquote(mu),xlab="MCMC Iteration")
abline(h=mu.true,lwd=2,col=rgb(0,1,0,.5))
plot(out$s2.save,type="l",main="",ylab=bquote(sigma^2),xlab="MCMC Iteration")
abline(h=s2.true,lwd=2,col=rgb(0,1,0,.5))
mean(out$mu.save[-(1:n.burn)])
quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975))
mean(out$s2.save[-(1:n.burn)])
quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975))
dinvchisq <- function(x,nu){
(2^(-nu/2) / gamma(nu/2)) * x^(-nu/2-1) * exp(-1/(2*x))
}
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x
dx = xx[2L] - xx[1L]
yy = d$y
result = sum(yy[xx >= 0]) * dx
result
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
set.seed(2021)
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["QB"]]-df[["WR"]]
y=differences
mu.0=0
s2.0=100
source("norm.invchisq.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,1,mean(y),n.mcmc)
layout(matrix(1:2,2,1))
plot(out$mu.save,type="l",main="",ylab=bquote(mu),xlab="MCMC Iteration")
abline(h=mu.true,lwd=2,col=rgb(0,1,0,.5))
plot(out$s2.save,type="l",main="",ylab=bquote(sigma^2),xlab="MCMC Iteration")
abline(h=s2.true,lwd=2,col=rgb(0,1,0,.5))
mean(out$mu.save[-(1:n.burn)])
quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975))
mean(out$s2.save[-(1:n.burn)])
quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975))
dinvchisq <- function(x,nu){
(2^(-nu/2) / gamma(nu/2)) * x^(-nu/2-1) * exp(-1/(2*x))
}
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x
dx = xx[2L] - xx[1L]
yy = d$y
result = sum(yy[xx >= 0]) * dx
result
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
set.seed(2021)
df = read.csv("/Users/sergi/Documents/Bayesian Statistical Methods/hw1/NFL_pos_spending_2022.csv")
differences = df[["QB"]]-df[["WR"]]
y=differences
mu.0=0
s2.0=100
source("norm.invchisq.mcmc.R")
n.mcmc=100000
n.burn=round(.1*n.mcmc)
out=norm.invchisq.mcmc(y,mu.0,s2.0,1,mean(y),n.mcmc)
layout(matrix(1:2,2,1))
plot(out$mu.save,type="l",main="",ylab=bquote(mu),xlab="MCMC Iteration")
abline(h=mu.true,lwd=2,col=rgb(0,1,0,.5))
plot(out$s2.save,type="l",main="",ylab=bquote(sigma^2),xlab="MCMC Iteration")
abline(h=s2.true,lwd=2,col=rgb(0,1,0,.5))
mean(out$mu.save[-(1:n.burn)])
quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975))
mean(out$s2.save[-(1:n.burn)])
quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975))
dinvchisq <- function(x,nu){
(2^(-nu/2) / gamma(nu/2)) * x^(-nu/2-1) * exp(-1/(2*x))
}
d = density(out$mu.save[n.burn:n.mcmc])
xx = d$x
dx = xx[2L] - xx[1L]
yy = d$y
result = sum(yy[xx >= 0]) * dx
result
layout(matrix(1:1,1,1))
plot(density(out$mu.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: mu",add=TRUE)
curve(dnorm(x,mu.0,sqrt(s2.0)),col=2,lwd=2,add=TRUE)
abline(v=mean(y),col=4)
abline(v=quantile(out$mu.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(density(out$s2.save[n.burn:n.mcmc]),lwd=2,main="Posterior and Prior: s2")
curve(dinvchisq(x,out$nu),col=2,lwd=2,add=TRUE)
abline(v=var(y),col=4)
var(y)
abline(v=quantile(out$s2.save[-(1:n.burn)],c(0.025,0.975)),col=rgb(1,0,0,.5),lwd=3,lty=2)
legend("topright",lty=c(1,1,1,2),col=c(1,2,4,2),lwd=2,legend=c("Posterior","Prior","Sample","95% ETI"))
plot(df[["QB"]],df[["WR"]])
plot(df[["QB"]]-df[["WR"]])
setwd("~/Documents/Bayesian Statistical Methods/hw2")
df = read.csv("ElectricCarData_Clean.csv")
df
differences = df[["QB"]]-df[["WR"]]
df = read.csv("ElectricCarData_Clean.csv")
x2 = df[["Seats"]]
x1 = df[["Segment"]]
y = df[["PriceEuro"]]
plot(y,x2)
plot(x2,y)
df = read.csv("ElectricCarData_Clean.csv")
df
df = read.csv("ElectricCarData_Clean.csv")
df
x2 = df[["Seats"]]
x1 = df[["Range_Km"]]
y = df[["PriceEuro"]]
plot(x2,y)
plot(x1,y)
plot(x1,x2,y)
scatterplot3d(x1,x2,y)
scatterplot3d
scaterplot3d
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(x1,x2,y)
scatterplot3d(x1,x2,y,angle=30)
scatterplot3d(x1,x2,y,angle=50)
scatterplot3d(x1,x2,y,angle=90)
scatterplot3d(x1,x2,y,angle=80)
scatterplot3d(x1,x2,y,angle=70)
scatterplot3d(x1,x2,y,angle=10)
scatterplot3d(x1,x2,y,angle=20)
scatterplot3d(x1,x2,y,angle=30)
scatterplot3d(x1,x2,y,angle=40)
scatterplot3d(x1,x2,y,angle=50)
scatterplot3d(x1,x2,y,angle=60)
scatterplot3d(x1,x2,y,angle=90)
scatterplot3d(x1,x2,y,angle=50)
scatterplot3d(x1,x2,y,angle=80)
scatterplot3d(x1,x2,y,angle=20)
scatterplot3d(x1,x2,y,angle=40)
scatterplot3d(x1,x2,y,angle= 0)
scatterplot3d(x1,x2,y,angle= 40)
df = read.csv("ElectricCarData_Clean.csv")
df
x2 = df[["Seats"]]
x1 = df[["Range_Km"]]
y = df[["PriceEuro"]]
scatterplot3d(x1,x2,y,angle= 40)
plot(y,x1)
plot(y,x2)
plot(x2,y)
plot(x1,y)
plot(x2,y)
scatterplot3d(x1,x2,y,angle= 40)
